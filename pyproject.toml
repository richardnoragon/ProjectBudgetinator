[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ProjectBudgetinator"
version = "1.0.0"
description = "A comprehensive budget management tool for Excel-based project data"
authors = [{name = "ProjectBudgetinator Team"}]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Exclude certain directories and files
exclude = [
    "build/",
    "dist/",
    "__pycache__/",
    "*.pyc",
    "venv/",
    ".venv/",
    "backups/",
    "logs/",
    "workbooks/",
]

# Allow untyped calls for third-party libraries that don't have stubs
[[tool.mypy.overrides]]
module = [
    "openpyxl.*",
    "tkinter.*",
    "pandas.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pylint]
max-line-length = 100
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
]

[tool.pylint.FORMAT]
max-line-length = 100

[tool.pylint.MESSAGES_CONTROL]
confidence = ""
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
]

[tool.pylint.SIMILARITIES]
min-similarity-lines = 4
ignore-comments = true
ignore-docstrings = true

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.pyc",
    "*.pyo",
    "venv",
    ".venv",
    "backups",
    "logs",
    "workbooks",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # use of assert
]

[tool.bandit]
exclude_dirs = [
    "tests",
    "build",
    "dist",
    "backups",
    "logs",
    "workbooks",
    "venv",
    ".venv",
]
skips = [
    "B101",  # assert_used - we use asserts in tests
    "B601",  # paramiko_calls - if we ever use paramiko
]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | backups
  | logs
  | workbooks
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/backups/*",
    "*/logs/*",
    "*/workbooks/*",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:build/coverage",
    "--cov-report=xml:build/coverage.xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
