import tkinter as tk
from tkinter import StringVar, Label, Entry, Button, Frame, Text, Scrollbar
from tkinter import messagebox


class P1ManagerDialog(tk.Toplevel):
    def __init__(self, parent, worksheet, file_path):
        super().__init__(parent)
        self.title("P1 - Coordinator Management")
        self.resizable(False, False)
        self.result = None
        
        # Store the worksheet and file path
        self.worksheet = worksheet
        self.file_path = file_path
        
        # Create variables dictionary for form fields
        self.vars = {}
        
        # Create the form using the same layout as PartnerDialog
        self._create_widgets()
        self._load_worksheet_values()
        
        # Make dialog modal
        self.grab_set()
        self.wait_window()

    def _create_widgets(self):
        # Display File Path (readonly) - matching PartnerDialog header pattern
        Label(self, text="Workbook File:").grid(
            row=0, column=0, sticky="w", padx=8, pady=2)
        self.vars['file_path'] = StringVar(value=self.file_path)
        entry = Entry(
            self,
            textvariable=self.vars['file_path'],
            width=60,
            state='readonly'
        )
        entry.grid(row=0, column=1, padx=8, pady=2, columnspan=5)

        # Define field groups exactly like PartnerDialog - 3 columns
        fields_col1 = [
            ("partner_identification_code", "Partner ID Code"),
            ("name_of_beneficiary", "Name of Beneficiary"),
            ("country", "Country"),
            ("role", "Role")
        ]
        
        fields_col2 = [
            ("wp1", "WP1"),
            ("wp2", "WP2"),
            ("wp3", "WP3"),
            ("wp4", "WP4"),
            ("wp5", "WP5"),
            ("wp6", "WP6"),
            ("wp7", "WP7"),
            ("wp8", "WP8"),
            ("wp9", "WP9"),
            ("wp10", "WP10"),
            ("wp11", "WP11"),
            ("wp12", "WP12"),
            ("wp13", "WP13"),
            ("wp14", "WP14"),
            ("wp15", "WP15")
        ]
        
        fields_col3 = [
            ("name_subcontractor_1", "Name Subcontrator 1"),
            ("sum_subcontractor_1", "Sum Subcontractor 1"),
            ("explanation_subcontractor_1", "Explanation of Subcontractor 1"),
            ("name_subcontractor_2", "Name Subcontrator 2"),
            ("sum_subcontractor_2", "Sum Subcontractor 2"),
            ("explanation_subcontractor_2", "Explanation of Subcontractor 2"),
            ("sum_travel", "Travel and substistence /€"),
            ("sum_equipment", "Equipment /€"),
            (
                "sum_other",
                "Other goods, works and services /€"
            ),
            ("sum_financial_support", "Financial support to third parties /€"),
            (
                "sum_internal_goods",
                "Internally invoiced goods & services "
                "(Unit costs- usual accounting practices) /€"
            ),
            (
                "explanation_financial_support",
                "Financial support to third parties /€"
            ),
            (
                "explanation_internal_goods",
                "Internally invoiced goods & services "
                "(Unit costs- usual accounting practices) /€"
            ),
            ("sum_income_generated", "Income generated by the action"),
            ("sum_financial_contributions", "Financial contributions"),
            ("sum_own_resources", "Own resources"),
            (
                "explanation_income_generated",
                "Income generated by the action"
            ),
            (
                "explanation_financial_contributions",
                "Financial contributions"
            ),
            ("explanation_own_resources", "Own resources")
        ]
        
        row0 = 1

        # First column - same as PartnerDialog
        for i, (key, label) in enumerate(fields_col1):
            Label(
                self, text=f"{label}:"
            ).grid(
                row=i+row0+1, column=0, sticky="w", padx=8, pady=2
            )
            var = StringVar()
            entry = Entry(self, textvariable=var, width=32)
            entry.grid(row=i+row0+1, column=1, padx=8, pady=2)
            self.vars[key] = var

        # Second column - same as PartnerDialog
        for i, (key, label) in enumerate(fields_col2):
            Label(
                self, text=f"{label}:"
            ).grid(
                row=i, column=2, sticky="w", padx=8, pady=2
            )
            var = StringVar()
            entry = Entry(self, textvariable=var, width=24)
            entry.grid(row=i, column=3, padx=8, pady=2)
            self.vars[key] = var

        # Third column - same as PartnerDialog
        for i, (key, label) in enumerate(fields_col3):
            Label(
                self, text=f"{label}:"
            ).grid(
                row=i, column=4, sticky="w", padx=8, pady=2
            )
            var = StringVar()
            entry = Entry(self, textvariable=var, width=20)
            entry.grid(row=i, column=5, padx=8, pady=2)
            self.vars[key] = var

        # Place buttons below the last row - same as PartnerDialog
        row0_offset = row0 + 1
        max_rows = max(
            len(fields_col1) + row0_offset,
            len(fields_col2),
            len(fields_col3)
        )
        btn_frame = Frame(self)
        btn_frame.grid(row=max_rows, column=0, columnspan=6, pady=8)
        
        save_btn = Button(btn_frame, text="Save", command=self._on_save)
        save_btn.pack(side="left", padx=8)
        
        cancel_btn = Button(btn_frame, text="Cancel", command=self._on_cancel)
        cancel_btn.pack(side="left", padx=8)
        
        self.protocol("WM_DELETE_WINDOW", self._on_cancel)

    def _load_worksheet_values(self):
        """Load values from the P1-Coord worksheet into the form fields."""
        try:
            # Define common cell mappings for P1 coordinator sheets
            # These are typical locations - adjust based on actual worksheet structure
            cell_mappings = {
                # Project Information (column B)
                'project_title': 'B2',
                'project_acronym': 'B3',
                'grant_agreement': 'B4',
                'project_coordinator': 'B5',
                'start_date': 'B6',
                'end_date': 'B7',
                'total_budget': 'B8',
                'eu_contribution': 'B9',
                
                # Coordinator Information (column E)
                'coord_organization': 'E2',
                'coord_country': 'E3',
                'coord_contact_person': 'E4',
                'coord_email': 'E5',
                'coord_phone': 'E6',
                'coord_address': 'E7',
                'coord_department': 'E8',
                'coord_website': 'E9',
                
                # Financial Summary (column H)
                'coord_budget': 'H2',
                'coord_personnel': 'H3',
                'coord_travel': 'H4',
                'coord_equipment': 'H5',
                'coord_other': 'H6',
                'coord_overhead': 'H7',
                'coord_subcontracting': 'H8',
                'coord_consumables': 'H9',
            }
            
            # Load cell values
            for key, cell_address in cell_mappings.items():
                if key in self.vars:
                    try:
                        cell_value = self.worksheet[cell_address].value
                        if cell_value is not None:
                            self.vars[key].set(str(cell_value))
                    except Exception:
                        # Cell doesn't exist or can't be read, skip it
                        pass
                        
        except Exception as e:
            messagebox.showwarning(
                "Load Warning",
                f"Some values could not be loaded from the worksheet:\n{str(e)}"
            )

    def _on_save(self):
        """Save the form data back to the worksheet."""
        try:
            # Define cell mappings for saving
            cell_mappings = {
                # Project Information
                'project_title': 'B2',
                'project_acronym': 'B3',
                'grant_agreement': 'B4',
                'project_coordinator': 'B5',
                'start_date': 'B6',
                'end_date': 'B7',
                'total_budget': 'B8',
                'eu_contribution': 'B9',
                
                # Coordinator Information
                'coord_organization': 'E2',
                'coord_country': 'E3',
                'coord_contact_person': 'E4',
                'coord_email': 'E5',
                'coord_phone': 'E6',
                'coord_address': 'E7',
                'coord_department': 'E8',
                'coord_website': 'E9',
                
                # Financial Summary
                'coord_budget': 'H2',
                'coord_personnel': 'H3',
                'coord_travel': 'H4',
                'coord_equipment': 'H5',
                'coord_other': 'H6',
                'coord_overhead': 'H7',
                'coord_subcontracting': 'H8',
                'coord_consumables': 'H9',
            }
            
            # Save form values to worksheet
            changes_made = False
            for key, cell_address in cell_mappings.items():
                if key in self.vars:
                    value = self.vars[key].get().strip()
                    if value:
                        # Try to convert numeric values
                        try:
                            if key in ['total_budget', 'eu_contribution', 'coord_budget', 
                                     'coord_personnel', 'coord_travel', 'coord_equipment', 
                                     'coord_other', 'coord_overhead', 'coord_subcontracting',
                                     'coord_consumables']:
                                value = float(value.replace(',', '').replace('€', '').strip())
                        except ValueError:
                            pass  # Keep as string
                        
                        self.worksheet[cell_address] = value
                        changes_made = True
                    else:
                        self.worksheet[cell_address] = None
            
            if changes_made:
                self.result = {
                    'worksheet': self.worksheet,
                    'changes_made': True,
                    'form_data': {key: var.get() for key, var in self.vars.items()}
                }
                messagebox.showinfo("Success", "P1 coordinator data has been updated in the worksheet.")
            else:
                self.result = {'changes_made': False}
                messagebox.showinfo("No Changes", "No changes were made to save.")
            
            self.destroy()
            
        except Exception as e:
            messagebox.showerror("Save Error", f"Failed to save data to worksheet:\n{str(e)}")

    def _on_cancel(self):
        """Cancel the edit and close the dialog."""
        if messagebox.askyesno("Cancel", "Are you sure you want to cancel? Any unsaved changes will be lost."):
            self.result = None
            self.destroy()
