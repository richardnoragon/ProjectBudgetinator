"""
Partner management functions for working with Excel workbooks.
"""
import openpyxl
from tkinter import messagebox, simpledialog, Toplevel, Label, Entry, Button, StringVar
import tkinter as tk
import datetime

class PartnerDialog(Toplevel):
    """Dialog for entering partner details"""
    def __init__(self, master, partner_number, partner_acronym):
        super().__init__(master)
        self.title("Add Partner Details")
        self.resizable(False, False)
        self.result = None

        self.vars = {}
        # Display Partner Number and Acronym (readonly)
        Label(self, text="Partner Number and Acronym:").grid(row=0, column=0, sticky="w", padx=8, pady=2)
        self.vars['partner_number_acronym'] = StringVar(value=f"{partner_number}, {partner_acronym}")
        entry = Entry(self, textvariable=self.vars['partner_number_acronym'], width=32, state='readonly')
        entry.grid(row=0, column=1, padx=8, pady=2, columnspan=3)

        # The rest of the fields
        fields_col1 = [
            ("partner_identification_code", "Partner ID Code"),
            ("name_of_beneficiary", "Name of Beneficiary"),
            ("country", "Country"),
            ("role", "Role")
        ]
        fields_col2 = [
            ("wp1", "WP1"),
            ("wp2", "WP2"),
            ("wp3", "WP3"),
            ("wp4", "WP4"),
            ("wp5", "WP5"),
            ("wp6", "WP6"),
            ("wp7", "WP7"),
            ("wp8", "WP8"),
            ("wp9", "WP9"),
            ("wp10", "WP10"),
            ("wp11", "WP11"),
            ("wp12", "WP12"),
            ("wp13", "WP13"),
            ("wp14", "WP14"),
            ("wp15", "WP15")
        ]
        fields_col3 = [
            ("name_subcontractor_1", "Name Subcontrator 1"),
            ("sum_subcontractor_1", "Sum Subcontractor 1"),
            ("explanation_subcontractor_1", "Explanation of Subcontractor 1"),
            ("name_subcontractor_2", "Name Subcontrator 2"),
            ("sum_subcontractor_2", "Sum Subcontractor 2"),
            ("explanation_subcontractor_2", "Explanation of Subcontractor 2"),
            ("sum_travel","Travel and substistence /€"),
            ("sum_equipment","Equipment /€"),
            ("sum_other"," Other goods, works and services /€ "),
            ("sum_financial_support","Financial support to third parties /€"),
            ("sum_internal_goods","Internally invoiced goods & services (Unit costs- usual accounting practices)  /€  "),
            ("explanation_financial_support","Financial support to third parties /€"),
            ("explanation_internal_goods","Internally invoiced goods & services (Unit costs- usual accounting practices)  /€  "),
            ("sum_income_generated","Income generated by the action"),
            ("sum_financial_contributions","Financial contributions"),
            ("sum_own_resources","Own resources"),
            ("explanation_income_generated","Income generated by the action"),
            ("explanation_financial_contributions","Financial contributions"),
            ("explanation_own_resources","Own resources")
        ]
        row0 = 1

        # First column (ends with Role)
        for i, (key, label) in enumerate(fields_col1):
            Label(self, text=label+":").grid(row=i+row0+1, column=0, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=32)
            entry.grid(row=i+row0+1, column=1, padx=8, pady=2)
            self.vars[key] = var

        # Second column (WP1 to WP15)
        for i, (key, label) in enumerate(fields_col2):
            Label(self, text=label+":").grid(row=i, column=2, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=12)
            entry.grid(row=i, column=3, padx=8, pady=2)
            self.vars[key] = var

        # Third column (rest)
        for i, (key, label) in enumerate(fields_col3):
            Label(self, text=label+":").grid(row=i, column=4, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=24)
            entry.grid(row=i, column=5, padx=8, pady=2)
            self.vars[key] = var

        # Place buttons below the last row of the largest column
        max_rows = max(len(fields_col1)+row0+1, len(fields_col2), len(fields_col3))
        btn_frame = tk.Frame(self)
        btn_frame.grid(row=max_rows, column=0, columnspan=6, pady=8)
        Button(btn_frame, text="Commit", command=self.commit).pack(side="left", padx=8)
        Button(btn_frame, text="Cancel", command=self.cancel).pack(side="left", padx=8)
        self.protocol("WM_DELETE_WINDOW", self.cancel)
        self.grab_set()
        self.wait_window()

    def commit(self):
        try:
            # First show what values we have in the dialog
            wp_values = {}
            debug_msg = ["Current dialog values:"]

            for key, var in self.vars.items():
                value = var.get().strip()
                if key.startswith('wp'):
                    try:
                        wp_values[key] = float(value) if value else 0.0
                        debug_msg.append(f"{key} = {wp_values[key]}")
                    except ValueError:
                        wp_values[key] = 0.0
                        debug_msg.append(f"{key} = 0.0 (converted from '{value}')")

            # Show the values we collected
            messagebox.showinfo("Debug - Dialog Values", "\n".join(debug_msg))

                # Get partner number and acronym from the readonly field
            partner_number, partner_acronym = [x.strip() for x in 
                self.vars['partner_number_acronym'].get().split(',', 1)]

            # Now create the result dictionary with all values
            v = self.vars  # Shorter alias for vars
            self.result = {
                'project_partner_number': partner_number,
                'partner_acronym': partner_acronym,

                # Basic information
                'partner_identification_code': (
                    v['partner_identification_code'].get()),
                'name_of_beneficiary': v['name_of_beneficiary'].get(),
                'country': v['country'].get(),
                'role': v['role'].get(),

                # Subcontractor information
                'name_subcontractor_1': v['name_subcontractor_1'].get(),
                'sum_subcontractor_1': v['sum_subcontractor_1'].get(),
                'explanation_subcontractor_1': (
                    v['explanation_subcontractor_1'].get()),
                'name_subcontractor_2': v['name_subcontractor_2'].get(),
                'sum_subcontractor_2': v['sum_subcontractor_2'].get(),
                'explanation_subcontractor_2': (
                    v['explanation_subcontractor_2'].get()),

                # Financial information
                'sum_travel': v['sum_travel'].get(),
                'sum_equipment': v['sum_equipment'].get(),
                'sum_other': v['sum_other'].get(),
                'sum_financial_support': v['sum_financial_support'].get(),
                'sum_internal_goods': v['sum_internal_goods'].get(),
                'sum_income_generated': v['sum_income_generated'].get(),
                'sum_financial_contributions': (
                    v['sum_financial_contributions'].get()),
                'sum_own_resources': v['sum_own_resources'].get(),

                # Explanations
                'explanation_financial_support': (
                    v['explanation_financial_support'].get()),
                'explanation_internal_goods': (
                    v['explanation_internal_goods'].get()),
                'explanation_income_generated': (
                    v['explanation_income_generated'].get()),
                'explanation_financial_contributions': (
                    v['explanation_financial_contributions'].get()),
                'explanation_own_resources': (
                    v['explanation_own_resources'].get()),
            }

            # Add all WP values
            self.result.update(wp_values)

            # Show final result that will be saved
            debug_msg = ["Values being saved:"]
            for k, v in self.result.items():
                debug_msg.append(f"{k} = {v}")
            messagebox.showinfo("Debug - Final Values", "\n".join(debug_msg))

            self.destroy()
        except Exception as e:
            messagebox.showerror("Error", f"Error in commit: {str(e)}")

    def cancel(self):
        self.result = None
        self.destroy()



def add_partner_to_workbook(workbook, partner_info):
    """Add a partner worksheet to an Excel workbook."""
    print("DEBUG - Received partner info:")
    for key, value in partner_info.items():
        print(f"  {key}: {value}")

    sheet_name = (
        f"P{partner_info['project_partner_number']} "
        f"{partner_info['partner_acronym']}"
    )
    if sheet_name in workbook.sheetnames:
        messagebox.showerror("Error", "Worksheet already exists.")
        return False

    ws = workbook.create_sheet(title=sheet_name)

    # Write basic partner information
    ws['B2'] = "Partner Number:"
    ws['D2'] = partner_info['project_partner_number']
    ws['B3'] = "Partner Acronym:"
    ws['D3'] = partner_info['partner_acronym']
    ws['B4'] = "Partner ID Code:"
    ws['D4'] = partner_info['partner_identification_code']
    ws['B5'] = "Name of Beneficiary:"
    ws['D5'] = partner_info['name_of_beneficiary']
    ws['B6'] = "Country:"
    ws['D6'] = partner_info['country']
    ws['B7'] = "Role:"
    ws['D7'] = partner_info['role']

    # Write WP values
    wp_fields = {
        'wp1': 'C18', 'wp2': 'D18', 'wp3': 'E18', 'wp4': 'F18',
        'wp5': 'G18', 'wp6': 'H18', 'wp7': 'I18', 'wp8': 'J18',
        'wp9': 'K18', 'wp10': 'L18', 'wp11': 'M18', 'wp12': 'N18',
        'wp13': 'O18', 'wp14': 'P18', 'wp15': 'Q18'
    }
    
    for wp_key, cell_ref in wp_fields.items():
        value = float(partner_info.get(wp_key, 0))
        ws[cell_ref] = value
        ws[cell_ref].number_format = '#,##0.00'

    # Write subcontractor information
    # Subcontractor 1
    ws['B20'] = "Subcontractor 1 Name:"
    ws['D20'] = partner_info.get('name_subcontractor_1', '')
    ws['B21'] = "Subcontractor 1 Sum:"
    ws['D21'] = partner_info.get('sum_subcontractor_1', '')
    ws['B22'] = "Subcontractor 1 Explanation:"
    ws['D22'] = partner_info.get('explanation_subcontractor_1', '')

    # Subcontractor 2
    ws['B24'] = "Subcontractor 2 Name:"
    ws['D24'] = partner_info.get('name_subcontractor_2', '')
    ws['B25'] = "Subcontractor 2 Sum:"
    ws['D25'] = partner_info.get('sum_subcontractor_2', '')
    ws['B26'] = "Subcontractor 2 Explanation:"
    ws['D26'] = partner_info.get('explanation_subcontractor_2', '')

    # Write financial information
    financial_fields = [
        ('sum_travel', 'Travel and subsistence /€', 'D28', 'F28'),
        ('sum_equipment', 'Equipment /€', 'D29', 'F29'),
        ('sum_other', 'Other goods, works and services /€', 'D30', 'F30'),
        ('sum_financial_support',
            'Financial support to third parties /€', 'D31', 'F31'),
        ('sum_internal_goods',
            'Internally invoiced goods & services /€', 'D32', 'F32'),
        ('sum_income_generated',
            'Income generated by the action', 'D33', 'F33'),
        ('sum_financial_contributions',
            'Financial contributions', 'D34', 'F34'),
        ('sum_own_resources', 'Own resources', 'D35', 'F35')
    ]

    for field_key, label, label_cell, value_cell in financial_fields:
        ws[label_cell] = label
        value = partner_info.get(field_key, '')
        if value and isinstance(value, (int, float)):
            ws[value_cell] = float(value)
            ws[value_cell].number_format = '#,##0.00'
        else:
            ws[value_cell] = value

    # Write explanation fields
    explanation_fields = [
        ('explanation_financial_support',
            'Financial Support Explanation:', 'B36', 'G36'),
        ('explanation_internal_goods',
            'Internal Goods Explanation:', 'B37', 'G37'),
        ('explanation_income_generated',
            'Income Generated Explanation:', 'B38', 'G38'),
        ('explanation_financial_contributions',
            'Financial Contributions Explanation:', 'B39', 'G39'),
        ('explanation_own_resources',
            'Own Resources Explanation:', 'B40', 'G40')
    ]

    for field_key, label, label_cell, value_cell in explanation_fields:
        ws[label_cell] = label
        ws[value_cell] = partner_info.get(field_key, '')

    # Update version history
    update_version_history(workbook, f"Added partner: {sheet_name}")
    return True


def update_version_history(workbook, summary):
    """Update the version history sheet with a new entry"""
    from version import full_version_string
    version_sheet_name = "Version History"
    version_info = full_version_string()
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if version_sheet_name not in workbook.sheetnames:
        vh_ws = workbook.create_sheet(title=version_sheet_name)
        vh_ws.append(["Timestamp", "Version Info", "Summary"])
    else:
        vh_ws = workbook[version_sheet_name]
    
    vh_ws.append([timestamp, version_info, summary])
