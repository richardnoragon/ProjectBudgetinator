"""
Partner management functions for working with Excel workbooks.
"""
import openpyxl
from tkinter import messagebox, simpledialog, Toplevel, Label, Entry, Button, StringVar
import tkinter as tk
from openpyxl.styles import PatternFill
import datetime

class PartnerDialog(Toplevel):
    """Dialog for entering partner details"""
    def __init__(self, master, partner_number, partner_acronym):
        super().__init__(master)
        self.title("Add Partner Details")
        self.resizable(False, False)
        self.result = None
        self.partner_number = partner_number
        self.partner_acronym = partner_acronym
        self.vars = {}
        
        # Debug output to verify initialization
        print(f"\nDEBUG - Initializing dialog with:")
        print(f"  Partner Number: {partner_number}")
        print(f"  Partner Acronym: {partner_acronym}")
        
        fields_col1 = [
            ("partner_identification_code", "Partner ID Code"),
            ("name_of_beneficiary", "Name of Beneficiary"),
            ("country", "Country"),
            ("role", "Role")
        ]
        fields_col2 = [
            ("wp1", "WP1"),
            ("wp2", "WP2"),
            ("wp3", "WP3"),
            ("wp4", "WP4"),
            ("wp5", "WP5"),
            ("wp6", "WP6"),
            ("wp7", "WP7"),
            ("wp8", "WP8"),
            ("wp9", "WP9"),
            ("wp10", "WP10"),
            ("wp11", "WP11"),
            ("wp12", "WP12"),
            ("wp13", "WP13"),
            ("wp14", "WP14"),
            ("wp15", "WP15")
        ]
        fields_col3 = [
            ("name_subcontractor_1", "Name Subcontrator 1"),
            ("sum_subcontractor_1", "Sum Subcontractor 1"),
            ("explanation_subcontractor_1", "Explanation of Subcontractor 1"),
            ("name_subcontractor_2", "Name Subcontrator 2"),
            ("sum_subcontractor_2", "Sum Subcontractor 2"),
            ("explanation_subcontractor_2", "Explanation of Subcontractor 2"),
            ("sum_travel","Travel and substistence /€"),
            ("sum_equipment","Equipment /€"),
            ("sum_other"," Other goods, works and services /€ "),
            ("sum_financial_support","Financial support to third parties /€"),
            ("sum_internal_goods","Internally invoiced goods & services (Unit costs- usual accounting practices)  /€  "),
            ("explanation_financial_support","Financial support to third parties /€"),
            ("explanation_internal_goods","Internally invoiced goods & services (Unit costs- usual accounting practices)  /€  "),
            ("sum_income_generated","Income generated by the action"),
            ("sum_financial_contributions","Financial contributions"),
            ("sum_own_resources","Own resources"),
            ("explanation_income_generated","Income generated by the action"),
            ("explanation_financial_contributions","Financial contributions"),
            ("explanation_own_resources","Own resources")
        ]
        row0 = 0
        Label(self, text=f"Partner Number: {partner_number}").grid(row=row0, column=0, sticky="w", padx=8, pady=2)
        Label(self, text=f"Partner Acronym: {partner_acronym}").grid(row=row0+1, column=0, sticky="w", padx=8, pady=2)

        # First column (ends with Role)
        for i, (key, label) in enumerate(fields_col1):
            Label(self, text=label+":").grid(row=i+2, column=0, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=32)
            entry.grid(row=i+2, column=1, padx=8, pady=2)
            self.vars[key] = var

        # Second column (WP1 to WP15)
        for i, (key, label) in enumerate(fields_col2):
            Label(self, text=label+":").grid(row=i, column=2, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=12)
            entry.grid(row=i, column=3, padx=8, pady=2)
            self.vars[key] = var

        # Third column (rest)
        for i, (key, label) in enumerate(fields_col3):
            Label(self, text=label+":").grid(row=i, column=4, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=24)
            entry.grid(row=i, column=5, padx=8, pady=2)
            self.vars[key] = var

        # Place buttons below the last row of the largest column
        max_rows = max(len(fields_col1)+2, len(fields_col2), len(fields_col3))
        btn_frame = tk.Frame(self)
        btn_frame.grid(row=max_rows, column=0, columnspan=6, pady=8)
        Button(btn_frame, text="Commit", command=self.commit).pack(side="left", padx=8)
        Button(btn_frame, text="Cancel", command=self.cancel).pack(side="left", padx=8)
        self.protocol("WM_DELETE_WINDOW", self.cancel)
        self.grab_set()
        self.wait_window()

    def commit(self):
        try:
            # First show what values we have in the dialog
            wp_values = {}
            debug_msg = ["Current dialog values:"]
            
            for key, var in self.vars.items():
                value = var.get().strip()
                if key.startswith('wp'):
                    try:
                        wp_values[key] = float(value) if value else 0.0
                        debug_msg.append(f"{key} = {wp_values[key]}")
                    except ValueError:
                        wp_values[key] = 0.0
                        debug_msg.append(f"{key} = 0.0 (converted from '{value}')")
            
            # Show the values we collected
            messagebox.showinfo("Debug - Dialog Values", "\n".join(debug_msg))
            
            # Now create the result dictionary with all values
            self.result = {
                'project_partner_number': self.partner_number,
                'partner_acronym': self.partner_acronym,
                'partner_identification_code': self.vars['partner_identification_code'].get(),
                'name_of_beneficiary': self.vars['name_of_beneficiary'].get(),
                'country': self.vars['country'].get(),
                'role': self.vars['role'].get(),
                'name_subcontractor_1': self.vars['name_subcontractor_1'].get(),
                'sum_subcontractor_1': self.vars['sum_subcontractor_1'].get(),
                'explanation_subcontractor_1': self.vars['explanation_subcontractor_1'].get(),
                'name_subcontractor_2': self.vars['name_subcontractor_2'].get(),
                'sum_subcontractor_2': self.vars['sum_subcontractor_2'].get(),
                'explanation_subcontractor_2': self.vars['explanation_subcontractor_2'].get(),
            }

            # Add all WP values
            self.result.update(wp_values)

            # Show final result that will be saved
            debug_msg = ["Values being saved:"]
            for k, v in self.result.items():
                debug_msg.append(f"{k} = {v}")
            messagebox.showinfo("Debug - Final Values", "\n".join(debug_msg))

            self.destroy()
        except Exception as e:
            messagebox.showerror("Error", f"Error in commit: {str(e)}")

    def cancel(self):
        self.result = None
        self.destroy()



# --- NEW IMPLEMENTATION: Use PARTNER_TABLE_FORMAT for static formatting ---
from config.partner_table_format import PARTNER_TABLE_FORMAT, ROW_HEIGHTS, COLUMN_WIDTHS
from openpyxl.styles import Alignment

def add_partner_to_workbook(workbook, partner_info, dev_log=None):
    """Add a partner worksheet to an Excel workbook, using static formatting from PARTNER_TABLE_FORMAT."""
    print("DEBUG - Received partner info:")
    for key, value in partner_info.items():
        print(f"  {key}: {value}")

    sheet_name = f"P{partner_info['project_partner_number']} {partner_info['partner_acronym']}"
    if sheet_name in workbook.sheetnames:
        messagebox.showerror("Error", "Worksheet already exists.")
        return False

    ws = workbook.create_sheet(title=sheet_name)

    # Apply row heights and column widths
    for row_idx, height in ROW_HEIGHTS.items():
        ws.row_dimensions[row_idx].height = height
    for col_letter, width in COLUMN_WIDTHS.items():
        ws.column_dimensions[col_letter].width = width

    # --- Apply static labels and formatting from PARTNER_TABLE_FORMAT ---
    from openpyxl.utils import range_boundaries
    for cell_def in PARTNER_TABLE_FORMAT:
        cell_range = cell_def["range"]
        label = cell_def["label"]
        merge = cell_def.get("merge", False)
        fill_color = cell_def.get("fillColor")
        alignment = cell_def.get("alignment")

        # Merge cells if needed
        if merge or (":" in cell_range):
            ws.merge_cells(cell_range)
        # Always set value in the top-left cell of the range
        start_cell = cell_range.split(":")[0]
        ws[start_cell] = label

        min_col, min_row, max_col, max_row = range_boundaries(cell_range)
        # Apply fill color if specified
        if fill_color:
            fill = PatternFill(start_color=fill_color.replace("#", ""), end_color=fill_color.replace("#", ""), fill_type="solid")
            for row in ws.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):
                for cell in row:
                    cell.fill = fill
        # Apply alignment if specified
        if alignment:
            align = Alignment(horizontal=alignment)
            for row in ws.iter_rows(min_row=min_row, max_row=max_row, min_col=min_col, max_col=max_col):
                for cell in row:
                    cell.alignment = align

    # --- Insert dynamic partner values (example: number, acronym, etc.) ---
    # You may want to map partner_info keys to the correct cell from PARTNER_TABLE_FORMAT
    # Example: insert partner number and acronym
    # (You can expand this mapping as needed)
    label_to_key = {
        "Partner Number": "project_partner_number",
        "Partner Acronym": "partner_acronym",
        "PIC number": "partner_identification_code",
        "Country": "country",
        "Role": "role",
        "Name of beneficiary": "name_of_beneficiary"
    }
    for cell_def in PARTNER_TABLE_FORMAT:
        label = cell_def["label"]
        key = label_to_key.get(label)
        if key and key in partner_info:
            cell_range = cell_def["range"]
            start_cell = cell_range.split(":")[0]
            ws[start_cell] = partner_info[key]

    # --- WP values (dynamic) ---
    # Map WP fields to Excel columns (WP1->C, WP2->D, etc)
    wp_fields = {
        'wp1': 'C18', 'wp2': 'D18', 'wp3': 'E18', 'wp4': 'F18', 'wp5': 'G18',
        'wp6': 'H18', 'wp7': 'I18', 'wp8': 'J18', 'wp9': 'K18', 'wp10': 'L18',
        'wp11': 'M18', 'wp12': 'N18', 'wp13': 'O18', 'wp14': 'P18', 'wp15': 'Q18'
    }
    wp_header_row = 17
    for wp_key, cell_ref in wp_fields.items():
        # Write header
        header_cell = f"{cell_ref[0]}{wp_header_row}"
        ws[header_cell] = wp_key.upper()
        # Get and convert the value
        raw_value = partner_info.get(wp_key, "0")
        try:
            if isinstance(raw_value, (int, float)):
                value = float(raw_value)
            else:
                value = float(str(raw_value).strip() or 0)
        except (ValueError, TypeError):
            if dev_log:
                dev_log(f"Warning: Could not convert {wp_key}='{raw_value}' to number, using 0")
            value = 0.0
        ws[cell_ref] = value
        cell = ws[cell_ref]
        cell.number_format = '#,##0.00'
        if dev_log:
            dev_log(f"Set {cell_ref} = {value} for {wp_key} (raw_value='{raw_value}')")

    # Update version history
    update_version_history(workbook, f"Added partner: {sheet_name}")
    return True

def update_version_history(workbook, summary):
    """Update the version history sheet with a new entry"""
    from version import full_version_string
    version_sheet_name = "Version History"
    version_info = full_version_string()
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if version_sheet_name not in workbook.sheetnames:
        vh_ws = workbook.create_sheet(title=version_sheet_name)
        vh_ws.append(["Timestamp", "Version Info", "Summary"])
    else:
        vh_ws = workbook[version_sheet_name]
    
    vh_ws.append([timestamp, version_info, summary])
