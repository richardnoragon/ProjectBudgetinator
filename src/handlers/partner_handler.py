"""
Partner management functions for working with Excel workbooks.
"""
import openpyxl
from tkinter import messagebox, simpledialog, Toplevel, Label, Entry, Button, StringVar
import tkinter as tk
import datetime

class PartnerDialog(Toplevel):
    """Dialog for entering partner details"""
    def __init__(self, master, partner_number, partner_acronym):
        super().__init__(master)
        self.title("Add Partner Details")
        self.resizable(False, False)
        self.result = None
        self.partner_number = partner_number
        self.partner_acronym = partner_acronym
        self.vars = {}
        
        # Debug output to verify initialization
        print(f"\nDEBUG - Initializing dialog with:")
        print(f"  Partner Number: {partner_number}")
        print(f"  Partner Acronym: {partner_acronym}")
        
        fields_col1 = [
            ("partner_identification_code", "Partner ID Code"),
            ("name_of_beneficiary", "Name of Beneficiary"),
            ("country", "Country"),
            ("role", "Role")
        ]  # Field names match the label_to_key dictionary in add_partner_to_workbook
        fields_col2 = [
            ("wp1", "WP1"),
            ("wp2", "WP2"),
            ("wp3", "WP3"),
            ("wp4", "WP4"),
            ("wp5", "WP5"),
            ("wp6", "WP6"),
            ("wp7", "WP7"),
            ("wp8", "WP8"),
            ("wp9", "WP9"),
            ("wp10", "WP10"),
            ("wp11", "WP11"),
            ("wp12", "WP12"),
            ("wp13", "WP13"),
            ("wp14", "WP14"),
            ("wp15", "WP15")
        ]
        fields_col3 = [
            ("name_subcontractor_1", "Name Subcontrator 1"),
            ("sum_subcontractor_1", "Sum Subcontractor 1"),
            ("explanation_subcontractor_1", "Explanation of Subcontractor 1"),
            ("name_subcontractor_2", "Name Subcontrator 2"),
            ("sum_subcontractor_2", "Sum Subcontractor 2"),
            ("explanation_subcontractor_2", "Explanation of Subcontractor 2"),
            ("sum_travel","Travel and substistence /€"),
            ("sum_equipment","Equipment /€"),
            ("sum_other"," Other goods, works and services /€ "),
            ("sum_financial_support","Financial support to third parties /€"),
            ("sum_internal_goods","Internally invoiced goods & services (Unit costs- usual accounting practices)  /€  "),
            ("explanation_financial_support","Financial support to third parties /€"),
            ("explanation_internal_goods","Internally invoiced goods & services (Unit costs- usual accounting practices)  /€  "),
            ("sum_income_generated","Income generated by the action"),
            ("sum_financial_contributions","Financial contributions"),
            ("sum_own_resources","Own resources"),
            ("explanation_income_generated","Income generated by the action"),
            ("explanation_financial_contributions","Financial contributions"),
            ("explanation_own_resources","Own resources")
        ]
        row0 = 0
        Label(self, text=f"Partner Number: {partner_number}").grid(row=row0, column=0, sticky="w", padx=8, pady=2)
        Label(self, text=f"Partner Acronym: {partner_acronym}").grid(row=row0+1, column=0, sticky="w", padx=8, pady=2)

        # First column (ends with Role)
        for i, (key, label) in enumerate(fields_col1):
            Label(self, text=label+":").grid(row=i+2, column=0, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=32)
            entry.grid(row=i+2, column=1, padx=8, pady=2)
            self.vars[key] = var

        # Second column (WP1 to WP15)
        for i, (key, label) in enumerate(fields_col2):
            Label(self, text=label+":").grid(row=i, column=2, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=12)
            entry.grid(row=i, column=3, padx=8, pady=2)
            self.vars[key] = var

        # Third column (rest)
        for i, (key, label) in enumerate(fields_col3):
            Label(self, text=label+":").grid(row=i, column=4, sticky="w", padx=8, pady=2)
            var = StringVar()
            entry = Entry(self, textvariable=var, width=24)
            entry.grid(row=i, column=5, padx=8, pady=2)
            self.vars[key] = var

        # Place buttons below the last row of the largest column
        max_rows = max(len(fields_col1)+2, len(fields_col2), len(fields_col3))
        btn_frame = tk.Frame(self)
        btn_frame.grid(row=max_rows, column=0, columnspan=6, pady=8)
        Button(btn_frame, text="Commit", command=self.commit).pack(side="left", padx=8)
        Button(btn_frame, text="Cancel", command=self.cancel).pack(side="left", padx=8)
        self.protocol("WM_DELETE_WINDOW", self.cancel)
        self.grab_set()
        self.wait_window()

    def commit(self):
        try:
            # First show what values we have in the dialog
            wp_values = {}
            debug_msg = ["Current dialog values:"]
            
            for key, var in self.vars.items():
                value = var.get().strip()
                if key.startswith('wp'):
                    try:
                        wp_values[key] = float(value) if value else 0.0
                        debug_msg.append(f"{key} = {wp_values[key]}")
                    except ValueError:
                        wp_values[key] = 0.0
                        debug_msg.append(f"{key} = 0.0 (converted from '{value}')")
            
            # Show the values we collected
            messagebox.showinfo("Debug - Dialog Values", "\n".join(debug_msg))
            
            # Now create the result dictionary with all values
            self.result = {
                'project_partner_number': self.partner_number,
                'partner_acronym': self.partner_acronym,
                'partner_identification_code': self.vars['partner_identification_code'].get(),
                'name_of_beneficiary': self.vars['name_of_beneficiary'].get(),
                'country': self.vars['country'].get(),
                'role': self.vars['role'].get(),
                'name_subcontractor_1': self.vars['name_subcontractor_1'].get(),
                'sum_subcontractor_1': self.vars['sum_subcontractor_1'].get(),
                'explanation_subcontractor_1': self.vars['explanation_subcontractor_1'].get(),
                'name_subcontractor_2': self.vars['name_subcontractor_2'].get(),
                'sum_subcontractor_2': self.vars['sum_subcontractor_2'].get(),
                'explanation_subcontractor_2': self.vars['explanation_subcontractor_2'].get(),
            }

            # Add all WP values
            self.result.update(wp_values)

            # Show final result that will be saved
            debug_msg = ["Values being saved:"]
            for k, v in self.result.items():
                debug_msg.append(f"{k} = {v}")
            messagebox.showinfo("Debug - Final Values", "\n".join(debug_msg))

            self.destroy()
        except Exception as e:
            messagebox.showerror("Error", f"Error in commit: {str(e)}")

    def cancel(self):
        self.result = None
        self.destroy()



def add_partner_to_workbook(workbook, partner_info, dev_log=None):
    """Add a partner worksheet to an Excel workbook."""
    print("DEBUG - Received partner info:")
    for key, value in partner_info.items():
        print(f"  {key}: {value}")

    sheet_name = f"P{partner_info['project_partner_number']} {partner_info['partner_acronym']}"
    if sheet_name in workbook.sheetnames:
        messagebox.showerror("Error", "Worksheet already exists.")
        return False

    ws = workbook.create_sheet(title=sheet_name)

    # Write basic partner information
    ws['B2'] = "Partner Number:"
    ws['D2'] = partner_info['project_partner_number']
    ws['B3'] = "Partner Acronym:"
    ws['D3'] = partner_info['partner_acronym']
    ws['B4'] = "Partner ID Code:"
    ws['D4'] = partner_info['partner_identification_code']
    ws['B5'] = "Name of Beneficiary:"
    ws['D5'] = partner_info['name_of_beneficiary']
    ws['B6'] = "Country:"
    ws['D6'] = partner_info['country']
    ws['B7'] = "Role:"
    ws['D7'] = partner_info['role']

    # Write work package values
    ws['B17'] = "Work Packages"
    for i in range(1, 16):
        wp_key = f'wp{i}'
        col = chr(ord('C') + i - 1)  # C for wp1, D for wp2, etc.
        ws[f'{col}17'] = f'WP{i}'
        ws[f'{col}18'] = float(partner_info.get(wp_key, 0))

    # Write subcontractor information
    current_row = 20
    ws[f'B{current_row}'] = "Subcontractor 1"
    ws[f'B{current_row+1}'] = "Name:"
    ws[f'D{current_row+1}'] = partner_info.get('name_subcontractor_1', '')
    ws[f'B{current_row+2}'] = "Sum:"
    ws[f'D{current_row+2}'] = partner_info.get('sum_subcontractor_1', '')
    ws[f'B{current_row+3}'] = "Explanation:"
    ws[f'D{current_row+3}'] = partner_info.get('explanation_subcontractor_1', '')

    current_row += 5
    ws[f'B{current_row}'] = "Subcontractor 2"
    ws[f'B{current_row+1}'] = "Name:"
    ws[f'D{current_row+1}'] = partner_info.get('name_subcontractor_2', '')
    ws[f'B{current_row+2}'] = "Sum:"
    ws[f'D{current_row+2}'] = partner_info.get('sum_subcontractor_2', '')
    ws[f'B{current_row+3}'] = "Explanation:"
    ws[f'D{current_row+3}'] = partner_info.get('explanation_subcontractor_2', '')

    # Write additional financial information
    current_row += 5
    financial_fields = [
        ('sum_travel', 'Travel and subsistence /€'),
        ('sum_equipment', 'Equipment /€'),
        ('sum_other', 'Other goods, works and services /€'),
        ('sum_financial_support', 'Financial support to third parties /€'),
        ('sum_internal_goods', 'Internally invoiced goods & services /€'),
        ('sum_income_generated', 'Income generated by the action'),
        ('sum_financial_contributions', 'Financial contributions'),
        ('sum_own_resources', 'Own resources')
    ]

    for field, label in financial_fields:
        ws[f'B{current_row}'] = label
        ws[f'D{current_row}'] = partner_info.get(field, '')
        if field.startswith('sum_'):
            try:
                value = float(partner_info.get(field, '0'))
                ws[f'D{current_row}'].number_format = '#,##0.00'
            except ValueError:
                pass
        current_row += 1

        # Add explanation if it exists
        explanation_key = f'explanation_{field[4:]}' if field.startswith('sum_') else None
        if explanation_key and explanation_key in partner_info:
            ws[f'B{current_row}'] = f'Explanation for {label}:'
            ws[f'D{current_row}'] = partner_info.get(explanation_key, '')
            current_row += 1

    # Update version history
    update_version_history(workbook, f"Added partner: {sheet_name}")
    return True

def update_version_history(workbook, summary):
    """Update the version history sheet with a new entry"""
    from version import full_version_string
    version_sheet_name = "Version History"
    version_info = full_version_string()
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if version_sheet_name not in workbook.sheetnames:
        vh_ws = workbook.create_sheet(title=version_sheet_name)
        vh_ws.append(["Timestamp", "Version Info", "Summary"])
    else:
        vh_ws = workbook[version_sheet_name]
    
    vh_ws.append([timestamp, version_info, summary])
